---
export const prerender = false;
import AdminLayout from '../../../layouts/AdminLayout.astro';
import ContentEditor from '../../../components/admin/ContentEditor.astro';
import { getSessionFromCookie } from '../../../lib/auth/session';
import { isLoggedIn } from '../../../lib/auth/auth';

// Check authentication
const session = getSessionFromCookie(Astro.request);
if (!session || !isLoggedIn(session)) {
  return Astro.redirect('/admin/login');
}

const { slug } = Astro.params;
const title = slug ? "Edit Blog Post | Admin" : "New Blog Post | Admin";

// Default empty blog data
let blogData = {
  title: "",
  slug: "",
  excerpt: "",
  content: "",
  tags: [] as string[],
  publishDate: new Date().toISOString()
};

// If slug is provided, try to fetch the blog data
if (slug && slug !== 'new') {
  try {
    const response = await fetch(`${Astro.url.origin}/api/blogs/${slug}`, {
      headers: {
        Cookie: Astro.request.headers.get('cookie') || ''
      }
    });
    
    if (response.ok) {
      const data = await response.json();
      if (data.success && data.blog) {
        blogData = data.blog;
      }
    } else {
      console.error('Error fetching blog data:', await response.text());
    }
  } catch (error) {
    console.error("Error fetching blog:", error);
  }
}
---

<AdminLayout title={title}>
  <div class="p-6">
    <div class="flex justify-between items-center mb-6">
      <h1 class="text-2xl font-bold">{slug && slug !== 'new' ? 'Edit Blog Post' : 'Add New Blog Post'}</h1>
      <a href="/admin/blogs" class="btn btn-outline btn-sm">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18" />
        </svg>
        Back to List
      </a>
    </div>
    
    <div class="card bg-base-100 shadow-md">
      <div class="card-body">
        <form id="blog-form" class="space-y-6">
          <div class="alert alert-error hidden" id="error-message">
            <svg xmlns="http://www.w3.org/2000/svg" class="stroke-current shrink-0 h-6 w-6" fill="none" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z" />
            </svg>
            <span id="error-text">Error message</span>
          </div>
          
          <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div>
              <label for="title" class="label">Blog Title</label>
              <input 
                type="text" 
                id="title" 
                name="title" 
                value={blogData.title}
                placeholder="Blog title" 
                required
                class="input input-bordered w-full"
              />
            </div>
            
            <div>
              <label for="slug" class="label">Slug</label>
              <input 
                type="text" 
                id="slug" 
                name="slug" 
                value={blogData.slug}
                placeholder="blog-post-slug" 
                required
                class="input input-bordered w-full"
              />
            </div>
          </div>
          
          <div>
            <label for="excerpt" class="label">Excerpt (Brief Description)</label>
            <textarea 
              id="excerpt" 
              name="excerpt" 
              rows="3"
              placeholder="Brief description of the blog post"
              required
              class="textarea textarea-bordered w-full"
            >{blogData.excerpt}</textarea>
          </div>

          <div>
            <label for="tags" class="label">Tags</label>
            <input 
              type="text" 
              id="tags" 
              name="tags" 
              value={blogData.tags.join(', ')}
              placeholder="Enter tags separated by commas" 
              class="input input-bordered w-full"
            />
          </div>
          
          <div>
            <label for="content" class="label">Blog Content (Markdown)</label>
            <ContentEditor 
              id="content" 
              content={blogData.content}
            />
          </div>
          
          <div class="flex justify-between mt-6">
            {slug && slug !== 'new' && (
              <button type="button" id="delete-btn" class="btn btn-error">
                Delete Blog Post
              </button>
            )}
            <div class="flex gap-2">
              <button type="button" id="preview-btn" class="btn btn-outline">Preview</button>
              <button type="submit" id="save-btn" class="btn btn-primary">
                <span id="button-text">Save Blog Post</span>
                <span id="button-loading" class="loading loading-spinner loading-sm hidden"></span>
              </button>
            </div>
          </div>
        </form>
      </div>
    </div>
  </div>
</AdminLayout>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const blogForm = document.getElementById('blog-form');
    const titleInput = document.getElementById('title') as HTMLInputElement;
    const slugInput = document.getElementById('slug') as HTMLInputElement;
    const saveBtn = document.getElementById('save-btn');
    const deleteBtn = document.getElementById('delete-btn');
    const errorMessage = document.getElementById('error-message');
    const errorText = document.getElementById('error-text');
    const buttonText = document.getElementById('button-text');
    const buttonLoading = document.getElementById('button-loading');
    
    // Generate slug from title
    if (titleInput && slugInput) {
      titleInput.addEventListener('blur', () => {
        if (!slugInput.value && titleInput.value) {
          // Create a slug from the title
          slugInput.value = titleInput.value
            .toLowerCase()
            .replace(/[^\w\s-]/g, '')
            .replace(/\s+/g, '-')
            .replace(/-+/g, '-');
        }
      });
    }
    
    // Handle form submission
    if (blogForm) {
      blogForm.addEventListener('submit', async (e) => {
        e.preventDefault();
        
        // Hide any previous errors
        if (errorMessage) {
          errorMessage.classList.add('hidden');
        }
        
        // Show loading state
        if (buttonText) {
          buttonText.classList.add('hidden');
        }
        
        if (buttonLoading) {
          buttonLoading.classList.remove('hidden');
        }
        
        if (saveBtn) {
          (saveBtn as HTMLButtonElement).disabled = true;
        }
        
        try {
          // Get form data
          const formData = new FormData(blogForm as HTMLFormElement);
          
          // Get values from form (including content from editor)
          const title = formData.get('title') as string;
          const slug = formData.get('slug') as string;
          const excerpt = formData.get('excerpt') as string;
          const tags = formData.get('tags') as string;
          const contentInput = document.querySelector('#content') as HTMLTextAreaElement;
          const content = contentInput?.value || '';

          const tagsArray = tags
            ? tags.split(',').map(tag => tag.trim()).filter(tag => tag)
            : [];
          
          // Prepare data for API
          const blogData = {
            title,
            slug,
            excerpt,
            tags: tagsArray,
            content
          };
          
          // Determine if this is a new blog or update
          const isNewBlog = !window.location.pathname.includes('/blogs/') || 
                           window.location.pathname.endsWith('/new');

          const apiUrl = isNewBlog 
            ? '/api/blogs'
            : `/api/blogs/${window.location.pathname.split('/').pop()}`;
          
          const method = isNewBlog ? 'POST' : 'PUT';
          
          // Submit the data
          const response = await fetch(apiUrl, {
            method,
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify(blogData),
          });
          
          const result = await response.json();
          
          if (response.ok && result.success) {
            // Redirect to the blog list or to the new blog
            window.location.href = '/admin/blogs';
          } else {
            // Show error
            if (errorText) {
              errorText.textContent = result.message || 'Failed to save blog post';
            }
            
            if (errorMessage) {
              errorMessage.classList.remove('hidden');
            }
          }
        } catch (error) {
          // Show error
          if (errorText) {
            errorText.textContent = 'An unexpected error occurred';
          }
          
          if (errorMessage) {
            errorMessage.classList.remove('hidden');
          }
          
          console.error('Error saving blog post:', error);
        } finally {
          // Reset button state
          if (buttonText) {
            buttonText.classList.remove('hidden');
          }
          
          if (buttonLoading) {
            buttonLoading.classList.add('hidden');
          }
          
          if (saveBtn) {
            (saveBtn as HTMLButtonElement).disabled = false;
          }
        }
      });
    }
    
    // Handle delete button
    if (deleteBtn) {
      deleteBtn.addEventListener('click', async () => {
        if (!confirm('Are you sure you want to delete this blog post? This action cannot be undone.')) {
          return;
        }
        
        try {
          const slug = window.location.pathname.split('/').pop();
          
          const response = await fetch(`/api/blogs/${slug}`, {
            method: 'DELETE',
          });
          
          const result = await response.json();
          
          if (response.ok && result.success) {
            window.location.href = '/admin/blogs';
          } else {
            // Show error
            if (errorText) {
              errorText.textContent = result.message || 'Failed to delete blog post';
            }
            
            if (errorMessage) {
              errorMessage.classList.remove('hidden');
            }
          }
        } catch (error) {
          if (errorText) {
            errorText.textContent = 'An unexpected error occurred';
          }
          
          if (errorMessage) {
            errorMessage.classList.remove('hidden');
          }
          
          console.error('Error deleting blog post:', error);
        }
      });
    }
  });
</script>
