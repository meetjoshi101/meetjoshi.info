---
import AdminLayout from '../../../layouts/AdminLayout.astro';
import ContentEditor from '../../../components/admin/ContentEditor.astro';

const title = "Add New Blog Post | Admin";
---

<AdminLayout title={title}>
  <div class="p-6">
    <div class="flex justify-between items-center mb-6">
      <h1 class="text-2xl font-bold">Add New Blog Post</h1>
      <a href="/admin/blogs" class="btn btn-outline btn-sm">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18" />
        </svg>
        Back to List
      </a>
    </div>
    
    <div class="card bg-base-100 shadow-md">
      <div class="card-body">
        <form id="blog-form" class="space-y-6">
          <div class="alert alert-error hidden" id="error-message">
            <svg xmlns="http://www.w3.org/2000/svg" class="stroke-current shrink-0 h-6 w-6" fill="none" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z" />
            </svg>
            <span id="error-text">Error message</span>
          </div>
          
          <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div>
              <label for="title" class="label">Title</label>
              <input 
                type="text" 
                id="title" 
                name="title" 
                placeholder="Blog post title" 
                required
                class="input input-bordered w-full"
              />
            </div>
            
            <div>
              <label for="slug" class="label">Slug</label>
              <input 
                type="text" 
                id="slug" 
                name="slug" 
                placeholder="blog-post-slug" 
                required
                class="input input-bordered w-full"
              />
              <p class="text-sm mt-1 opacity-70">URL-friendly version of the title</p>
            </div>
          </div>
          
          <div>
            <label for="description" class="label">Description</label>
            <textarea 
              id="description" 
              name="description" 
              placeholder="Short description of the blog post" 
              required
              class="textarea textarea-bordered w-full"
              rows="3"
            ></textarea>
          </div>
          
          <div>
            <label for="featuredImage" class="label">Featured Image URL</label>
            <input 
              type="url" 
              id="featuredImage" 
              name="featuredImage" 
              placeholder="https://example.com/image.jpg" 
              class="input input-bordered w-full"
            />
          </div>
          
          <div>
            <label class="label">Date</label>
            <input 
              type="date" 
              id="date" 
              name="date" 
              required
              class="input input-bordered w-full"
            />
          </div>
          
          <div>
            <label for="content" class="label">Content</label>
            <ContentEditor content="" id="content" minHeight="400px" />
          </div>
          
          <div class="card-actions justify-end">
            <button type="button" id="save-draft-btn" class="btn btn-outline">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7H5a2 2 0 00-2 2v9a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2h-3m-1 4l-3 3m0 0l-3-3m3 3V4" />
              </svg>
              Save Draft
            </button>
            <button type="submit" class="btn btn-primary">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8" />
              </svg>
              Publish Blog Post
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>
</AdminLayout>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const titleInput = document.getElementById('title');
    const slugInput = document.getElementById('slug');
    const blogForm = document.getElementById('blog-form');
    const saveDraftBtn = document.getElementById('save-draft-btn');
    const errorMessage = document.getElementById('error-message');
    const errorText = document.getElementById('error-text');
    
    // Automatically generate slug from title
    if (titleInput instanceof HTMLInputElement && slugInput instanceof HTMLInputElement) {
      titleInput.addEventListener('input', () => {
        const title = titleInput.value;
        // Convert to lowercase, replace spaces with hyphens, remove special chars
        const slug = title.toLowerCase()
          .replace(/\s+/g, '-')
          .replace(/[^\w-]+/g, '')
          .replace(/--+/g, '-')
          .replace(/^-+|-+$/g, '');
        
        slugInput.value = slug;
      });
    }
    
    // Set today's date as default
    const dateInput = document.getElementById('date');
    if (dateInput instanceof HTMLInputElement) {
      const today = new Date();
      const year = today.getFullYear();
      let month = (today.getMonth() + 1).toString().padStart(2, '0');
      let day = today.getDate().toString().padStart(2, '0');
      dateInput.value = `${year}-${month}-${day}`;
    }
    
    // Form submission
    blogForm?.addEventListener('submit', async (e) => {
      e.preventDefault();
      
      if (errorMessage) {
        errorMessage.classList.add('hidden');
      }
      
      try {
        // Get form data
        const formData = new FormData(e.target as HTMLFormElement);
        const contentTextarea = document.getElementById('content');
        
        if (contentTextarea instanceof HTMLTextAreaElement) {
          formData.append('content', contentTextarea.value);
        }
        
        // Convert FormData to regular object
        const blogData = Object.fromEntries(formData.entries());
        blogData.draft = false;
        
        // Send API request
        const response = await fetch('/api/blogs', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(blogData),
        });
        
        const data = await response.json();
        
        if (response.ok) {
          // Redirect to blog list on success
          window.location.href = '/admin/blogs';
        } else {
          // Show error message
          if (errorText) {
            errorText.textContent = data.message || 'Error saving blog post';
          }
          
          if (errorMessage) {
            errorMessage.classList.remove('hidden');
          }
        }
      } catch (error) {
        console.error('Error saving blog post:', error);
        if (errorText) {
          errorText.textContent = 'An unexpected error occurred';
        }
        
        if (errorMessage) {
          errorMessage.classList.remove('hidden');
        }
      }
    });
    
    // Save draft functionality
    saveDraftBtn?.addEventListener('click', async () => {
      if (errorMessage) {
        errorMessage.classList.add('hidden');
      }
      
      try {
        const formData = new FormData(blogForm as HTMLFormElement);
        const contentTextarea = document.getElementById('content');
        
        if (contentTextarea instanceof HTMLTextAreaElement) {
          formData.append('content', contentTextarea.value);
        }
        
        // Convert FormData to regular object
        const blogData = Object.fromEntries(formData.entries());
        blogData.draft = true;
        
        // Send API request
        const response = await fetch('/api/blogs', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(blogData),
        });
        
        const data = await response.json();
        
        if (response.ok) {
          // Redirect to blog list on success
          window.location.href = '/admin/blogs';
        } else {
          // Show error message
          if (errorText) {
            errorText.textContent = data.message || 'Error saving draft';
          }
          
          if (errorMessage) {
            errorMessage.classList.remove('hidden');
          }
        }
      } catch (error) {
        console.error('Error saving draft:', error);
        if (errorText) {
          errorText.textContent = 'An unexpected error occurred';
        }
        
        if (errorMessage) {
          errorMessage.classList.remove('hidden');
        }
      }
    });
  });
</script>
